import dotenv from "dotenv";
import { HumanMessage } from "@langchain/core/messages";
import { RunnableConfig } from "@langchain/core/runnables";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { SystemMessage } from "@langchain/core/messages";
import { AgentState } from "./agentState";
import { llm } from "../config/llm";
import { MESSAGES } from '../config/constants';
import { consultDentixSpecialistTool, consultCredintegralSpecialistTool, consultVidaDeudorSpecialistTool, consultBienestarSpecialistTool, consultInsuranceSpecialistTool, searchDentixClientTool, extractPhoneNumberTool, registerDentixClientTool, sendPaymentLinkEmailTool, confirmAndUpdateClientDataTool } from "../tools/tools";
import { END } from "@langchain/langgraph";

dotenv.config();

const luciaServiceAgent = createReactAgent({
    llm,
    tools: [
        consultDentixSpecialistTool,
        consultCredintegralSpecialistTool,
        consultVidaDeudorSpecialistTool,
        consultBienestarSpecialistTool, // <-- Nueva herramienta para Bienestar Plus
        consultInsuranceSpecialistTool,
        searchDentixClientTool,
        extractPhoneNumberTool,
        registerDentixClientTool, // <-- Agregamos la herramienta de registro
        sendPaymentLinkEmailTool,
        confirmAndUpdateClientDataTool // <-- Nueva herramienta para confirmar/actualizar datos
    ],
    stateModifier: new SystemMessage(MESSAGES.SYSTEM_LUCIA_SUPERVISOR_PROMPT)
})
  
export const luciaServiceNode = async (
    state: typeof AgentState.State,
    config?: RunnableConfig,
  ) => {
    console.log("üïµÔ∏è  [DEBUG] Estado recibido en luciaServiceNode:", JSON.stringify(state, null, 2));
    const phoneNumber = config?.configurable?.phone_number;

    // Identificaci√≥n del cliente basada en el n√∫mero de tel√©fono del remitente
    if (phoneNumber && !state.isClientIdentified) {
      try {
        const clientInfoString = await searchDentixClientTool.invoke({ phoneNumber });
        if (clientInfoString && clientInfoString !== 'No se encontr√≥ un cliente con ese n√∫mero.') {
          // Cliente existente encontrado
          const clientInfo = JSON.parse(clientInfoString);
          
          let greeting;
          if (clientInfo.service === 'vidadeudor') {
            // Cliente existente con vida deudor: ser estrat√©gico y consultivo
            greeting = `CLIENTE IDENTIFICADO - VIDA DEUDOR: ${clientInfo.name} ya est√° registrado con inter√©s en el seguro de Vida Deudor. 

INSTRUCCIONES ESTRAT√âGICAS INTELIGENTES:

**CASO 1 - Si el cliente dice EXPL√çCITAMENTE que quiere COMPRAR/ADQUIRIR:**
- Palabras clave: "quiero comprar", "procede con la compra", "adquirir", "contratar", "YA", "procede", "finalizar compra"
- ACCI√ìN: Procede INMEDIATAMENTE a confirmar sus datos usando confirm_and_update_client_data
- NO preguntes m√°s informaci√≥n, NO seas consultiva
- Ve directo a: "Para proceder con tu compra, necesito confirmar tus datos..."

**CASO 2 - Si el cliente pide informaci√≥n general:**
- Sal√∫dalo por su nombre de manera c√°lida y personalizada
- Reconoce que ya mostr√≥ inter√©s en el seguro de Vida Deudor previamente
- NO brindes toda la informaci√≥n de una vez
- Preg√∫ntale espec√≠ficamente QU√â informaci√≥n necesita hoy sobre el seguro
- S√© consultiva: haz que EL CLIENTE te diga qu√© quiere saber
- Una vez que especifique su necesidad, brinda informaci√≥n precisa

OBJETIVO: Si quiere comprar ‚Üí confirma datos. Si quiere informaci√≥n ‚Üí s√© estrat√©gica y consultiva.`;
          } else {
            // Cliente existente con otros servicios
            greeting = `El cliente ha sido identificado a partir de su n√∫mero de tel√©fono (${phoneNumber}): ${JSON.stringify(clientInfo)}. Sal√∫dalo por su nombre (${clientInfo.name}) y, como tiene el servicio '${clientInfo.service}', procede a consultar al especialista adecuado.`;
          }
          
          state.messages.push(new HumanMessage({ content: greeting, name: "system-notification" }));
          state.isClientIdentified = true; // Marcar como identificado
        } else {
          // Cliente NO encontrado - Usuario nuevo
          const newClientMessage = `Este es un USUARIO NUEVO (n√∫mero ${phoneNumber} no registrado en la base de datos). Cuando ofrezcas opciones de seguros, incluye tambi√©n el seguro de Asistencia Vida Deudor junto con los dem√°s seguros disponibles.`;
          
          state.messages.push(new HumanMessage({ content: newClientMessage, name: "system-notification" }));
          state.isClientIdentified = false; // Marcar como NO identificado
        }
      } catch (error) {
        console.error("Error durante el reconocimiento del cliente:", error);
        // En caso de error, tratar como usuario nuevo
        const errorClientMessage = `Error al verificar cliente. Tratar como USUARIO NUEVO e incluir seguro de Asistencia Vida Deudor en las opciones.`;
        state.messages.push(new HumanMessage({ content: errorClientMessage, name: "system-notification" }));
        state.isClientIdentified = false;
      }
    }

    const result = await luciaServiceAgent.invoke(state, config);
    const newLastMessage = result.messages[result.messages.length - 1];

    if (typeof newLastMessage.content === 'string') {
      console.log(`üí¨ Lucia responde: ${newLastMessage.content.substring(0, 100)}...`);
    }

    // Lucia siempre termina la conversaci√≥n despu√©s de responder
    // El cliente necesitar√° enviar un nuevo mensaje para continuar
    return {
      messages: [
        new HumanMessage({
          content: newLastMessage.content,
          name: "LuciaService"
        }),
      ],
      next: END, // Lucia siempre termina y espera nueva entrada del usuario
    };
};

// luciaServiceNode es un nodo que procesa mensajes para Lucia.
// Lucia maneja toda la conversaci√≥n, consulta a especialistas internamente cuando necesita informaci√≥n espec√≠fica,
// y responde al cliente como la √∫nica asesora experta en todos los tipos de seguros.
