import { OpenAIEmbeddings } from '@langchain/openai';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

/**
 * Configuraci√≥n compartida para embeddings
 */
const createEmbeddings = () => new OpenAIEmbeddings({
    openAIApiKey: process.env.OPENAI_API_KEY!,
    modelName: "text-embedding-3-small",
});

/**
 * Configuraci√≥n compartida para Supabase
 */
const createSupabaseClient = () => createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_KEY!
);

/**
 * Busca en la base vectorial de Dentix usando embeddings de OpenAI
 * @param query - La consulta del usuario
 * @returns Array de resultados de la b√∫squeda vectorial
 */
export const searchDentixVectors = async (query: string): Promise<any[]> => {
    const embeddings = createEmbeddings();
    const supabase = createSupabaseClient();
    console.log(`üîç Buscando en Dentix`);
    
    // Generar embedding para la consulta
    const queryEmbedding = await embeddings.embedQuery(query);
    
    // Buscar documentos similares en Dentix
    const { data, error } = await supabase.rpc('match_dentix_documents', {
        query_embedding: queryEmbedding,
        match_threshold: 0.3, // Umbral m√°s bajo para permitir m√°s resultados
        match_count: 3,
    });
    
    if (error) {
        throw new Error(`Dentix vector search error: ${error.message}`);
    }
    
    return data || [];
};

/**
 * Busca en la base vectorial de Credintegral usando embeddings de OpenAI
 * @param query - La consulta del usuario
 * @returns Array de resultados de la b√∫squeda vectorial
 */
export const searchCredintegralVectors = async (query: string): Promise<any[]> => {
    const embeddings = createEmbeddings();
    const supabase = createSupabaseClient();
    console.log(`[DEBUG] Iniciando b√∫squeda en Credintegral con la consulta: "${query}"`);

    try {
        const queryEmbedding = await embeddings.embedQuery(query);
        console.log("[DEBUG] Embedding generado para la consulta.");
        
        // Detectar si la consulta es sobre cobertura o precios y optimizar la b√∫squeda
        const isCoverageQuery = /cobertura|cubre|abarca|servicios|incluye|esperar|beneficios|protecci√≥n|ampara/i.test(query);
        const isPriceQuery = /precio|cuesta|vale|pagar|costo|cu√°nto|propuesta econ√≥mica|econ√≥mica|tarifa|valor|cotizaci√≥n/i.test(query);
        
        // Primero intentar con la consulta original, luego con variaciones si es necesario
        let searchQueries = [query];
        
        if (isCoverageQuery) {
            // Agregar variaciones de b√∫squeda para consultas sobre cobertura
            searchQueries = [
                query,
                "cobertura",
                "servicios incluidos",
                "beneficios seguro",
                "qu√© cubre"
            ];
        } else if (isPriceQuery) {
            // Agregar variaciones de b√∫squeda para consultas sobre precio
            searchQueries = [
                query,
                "propuesta econ√≥mica",
                "precio del seguro",
                "costo del seguro",
                "valor del seguro",
                "cu√°nto cuesta",
                "tarifa"
            ];
        }

        for (const searchQuery of searchQueries) {
            const searchEmbedding = searchQuery === query ? queryEmbedding : await embeddings.embedQuery(searchQuery);
            
            const { data, error } = await supabase.rpc('search_credintegral_documents_hybrid', {
                query_embedding: searchEmbedding,
                query_text: searchQuery,
                match_threshold: 0.1,
                match_count: 5, 
                rrf_k: 60
            });

            if (error) {
                console.error('[DEBUG] ‚ùå Error en la llamada RPC a Supabase:', JSON.stringify(error, null, 2));
                continue;
            }

            if (data && data.length > 0) {
                console.log('[DEBUG] ‚úÖ Llamada RPC a Supabase exitosa.');
                console.log('[DEBUG] üìÑ Datos recibidos de Supabase:', JSON.stringify(data, null, 2));
                return data;
            }
        }

        // Si no encontramos nada con ninguna consulta
        console.log('[DEBUG] ‚ö†Ô∏è La b√∫squeda no arroj√≥ resultados desde Supabase.');
        return [];

    } catch (e) {
        const errorMessage = e instanceof Error ? e.message : String(e);
        console.error(`[DEBUG] ‚ùå Excepci√≥n capturada en searchCredintegralVectors: ${errorMessage}`);
        throw e;
    }
};

/**
 * üöÄ MEJORA GLOBAL: Busca en la base vectorial de Vida Deudor usando embeddings de OpenAI
 * NUEVA ESTRATEGIA: B√∫squeda exhaustiva con ranking en lugar de devolver "lo primero que encuentre"
 * @param query - La consulta del usuario
 * @returns Array de resultados de la b√∫squeda vectorial rankeados por relevancia
 */
export const searchVidaDeudorVectors = async (query: string): Promise<any[]> => {
    const embeddings = createEmbeddings();
    const supabase = createSupabaseClient();
    console.log(`[DEBUG] üîç Iniciando b√∫squeda EXHAUSTIVA en Vida Deudor con la consulta: "${query}"`);

    try {
        // Generar embedding para la consulta
        const queryEmbedding = await embeddings.embedQuery(query);
        console.log("[DEBUG] Embedding generado para la consulta.");
        
        // Detectar si la consulta es sobre cobertura, precios o farmacias y optimizar la b√∫squeda
        const isCoverageQuery = /cobertura|cubre|abarca|servicios|incluye|esperar|beneficios|protecci√≥n|ampara/i.test(query);
        const isPriceQuery = /precio|cuesta|vale|pagar|costo|cu√°nto|propuesta econ√≥mica|econ√≥mica|tarifa|valor|cotizaci√≥n|cuanto cuesta|que cuesta|que precio|precio tiene|valor tiene|costo tiene|vale el seguro|cuanto vale|valor del seguro|costo del seguro|precio del seguro/i.test(query);
        const isFarmaciaQuery = /farmacia|farmacias|droguer√≠a|droguer√≠as|drogue|rebaja|medicamento|medicina|aplicar beneficio|donde puedo|que farmacias|cuales farmacias/i.test(query);
        
        // üéØ NUEVA ESTRATEGIA: B√öSQUEDA EXHAUSTIVA CON RANKING
        // En lugar de devolver el primer resultado, recopilar TODOS los resultados y rankearlos
        let searchQueries = [query];
        
        // Siempre agregar versiones simplificadas como fallback
        searchQueries.push("vida deudor");
        searchQueries.push("seguro vida deudor");
        searchQueries.push("asistencia vida deudor");
        
        if (isFarmaciaQuery) {
            // üéØ NUEVA L√ìGICA: Consultas espec√≠ficas sobre farmacias
            console.log("[DEBUG] üíä Consulta sobre farmacias detectada, agregando t√©rminos espec√≠ficos...");
            searchQueries.push("SERVICIO CONVENIO DESCUENTOS EN FARMACIAS");
            searchQueries.push("descuento farmacias");
            searchQueries.push("descuentos en farmacias");
            searchQueries.push("farmacia aliada");
            searchQueries.push("beneficio farmacia");
            searchQueries.push("Rebaja Droguer√≠as");
            searchQueries.push("5% descuento");
            searchQueries.push("ACCESO AL SERVICIO DESCUENTOS EN FARMACIAS");
            searchQueries.push("puntos de venta");
            searchQueries.push("Minimarkets");
        } else if (isCoverageQuery) {
            // Agregar variaciones de b√∫squeda para consultas sobre cobertura
            searchQueries.push("cobertura");
            searchQueries.push("servicios incluidos");
            searchQueries.push("beneficios seguro");
            searchQueries.push("qu√© cubre");
        } else if (isPriceQuery) {
            // Agregar variaciones de b√∫squeda espec√≠ficas para encontrar tarifas de vida deudor
            searchQueries.push("Tarifa mes / persona");
            searchQueries.push("Tarifa completa IVA del 19%");
            searchQueries.push("Tarifa propuesta para productos mandatorios");
            searchQueries.push("propuesta econ√≥mica vida deudor");
            searchQueries.push("propuesta econ√≥mica");
            searchQueries.push("tarifa mes persona");
            searchQueries.push("tarifa completa IVA");
            searchQueries.push("tarifa propuesta productos mandatorios");
            searchQueries.push("precio del seguro vida deudor");
            searchQueries.push("costo del seguro vida deudor");
            searchQueries.push("valor del seguro vida deudor");
            searchQueries.push("tarifa vida deudor");
        } else {
            // Para consultas generales, agregar t√©rminos relacionados
            searchQueries.push("informaci√≥n");
            searchQueries.push("seguro");
            searchQueries.push("cobertura");
            searchQueries.push("beneficios");
        }

        // üîç B√öSQUEDA EXHAUSTIVA: Recopilar resultados de TODAS las consultas
        const allChunks: any[] = [];
        const seenIds = new Set<number>();
        
        for (const searchQuery of searchQueries) {
            const searchEmbedding = searchQuery === query ? queryEmbedding : await embeddings.embedQuery(searchQuery);
            
            const { data, error } = await supabase.rpc('search_asistenciavida_documents_hybrid', {
                query_embedding: searchEmbedding,
                query_text: searchQuery,
                match_threshold: 0.1,
                match_count: 8, // Aumentamos para obtener m√°s resultados
                rrf_k: 60
            });

            if (error) {
                console.error('[DEBUG] ‚ùå Error en la llamada RPC a Supabase:', JSON.stringify(error, null, 2));
                continue;
            }

            if (data && data.length > 0) {
                console.log(`[DEBUG] ‚úÖ Consulta "${searchQuery}" encontr√≥ ${data.length} resultados`);
                
                // Agregar solo documentos √∫nicos (evitar duplicados)
                for (const doc of data) {
                    if (!seenIds.has(doc.id)) {
                        seenIds.add(doc.id);
                        // Agregar score de la consulta que lo encontr√≥ para ranking
                        doc.search_query = searchQuery;
                        doc.query_index = searchQueries.indexOf(searchQuery); // 0 = consulta original, mayor = menos espec√≠fica
                        allChunks.push(doc);
                    }
                }
            }
        }

        // üìä RANKING Y CONSOLIDACI√ìN DE RESULTADOS
        if (allChunks.length === 0) {
            console.log('[DEBUG] ‚ö†Ô∏è La b√∫squeda exhaustiva no arroj√≥ resultados desde Supabase.');
            return [];
        }

        console.log(`[DEBUG] üîç B√∫squeda exhaustiva completada: ${allChunks.length} documentos √∫nicos encontrados`);

        // üéØ L√ìGICA ESPECIAL PARA FARMACIAS: Priorizaci√≥n espec√≠fica
        if (isFarmaciaQuery) {
            const farmaciaDoc = allChunks.find((doc: any) => 
                doc.id === 35 || 
                doc.content.includes('SERVICIO CONVENIO DESCUENTOS EN FARMACIAS') || 
                doc.content.includes('Rebaja Droguer√≠as')
            );
            if (farmaciaDoc) {
                console.log('[DEBUG] üéØ ¬°Documento espec√≠fico de farmacias encontrado! Priorizando...');
                // Reorganizar para poner el documento de farmacias primero
                const otherDocs = allChunks.filter((doc: any) => doc.id !== farmaciaDoc.id);
                return [farmaciaDoc, ...otherDocs.slice(0, 2)]; // Farmacia + 2 documentos adicionales
            }
        }

        // üèÜ RANKING GLOBAL: Ordenar por relevancia combinada
        allChunks.sort((a, b) => {
            // 1. Priorizar por final_rank (relevancia sem√°ntica)
            const rankDiff = (b.final_rank || 0) - (a.final_rank || 0);
            if (Math.abs(rankDiff) > 0.01) return rankDiff;
            
            // 2. Si el ranking es similar, priorizar consultas m√°s espec√≠ficas (query_index menor)
            const queryDiff = (a.query_index || 0) - (b.query_index || 0);
            if (queryDiff !== 0) return queryDiff;
            
            // 3. Como √∫ltimo criterio, usar similarity si est√° disponible
            return (b.similarity || 0) - (a.similarity || 0);
        });

        // Filtrar por umbral m√≠nimo de relevancia
        const relevantResults = allChunks.filter(doc => (doc.final_rank || 0) > 0.01);
        
        if (relevantResults.length === 0) {
            console.log('[DEBUG] ‚ö†Ô∏è Ning√∫n resultado super√≥ el umbral m√≠nimo de relevancia (0.01)');
            return allChunks.slice(0, 3); // Devolver los 3 mejores aunque tengan baja relevancia
        }

        console.log(`[DEBUG] üèÜ Ranking final: ${relevantResults.length} documentos relevantes`);
        relevantResults.slice(0, 3).forEach((doc, i) => {
            console.log(`[DEBUG] ${i + 1}. ID: ${doc.id}, Rank: ${doc.final_rank?.toFixed(3)}, Query: "${doc.search_query}"`);
        });

        // Devolver los mejores 3 resultados rankeados
        return relevantResults.slice(0, 3);

    } catch (e) {
        const errorMessage = e instanceof Error ? e.message : String(e);
        console.error(`[DEBUG] ‚ùå Excepci√≥n capturada en searchVidaDeudorVectors: ${errorMessage}`);
        throw e;
    }
};

/**
 * Busca espec√≠ficamente informaci√≥n de tarifas de vida deudor con texto exacto
 * @param query - La consulta del usuario sobre precios
 * @returns Array de resultados espec√≠ficos de tarifas
 */
export const searchVidaDeudorTariffs = async (query: string): Promise<any[]> => {
    const supabase = createSupabaseClient();
    console.log(`[DEBUG] B√∫squeda espec√≠fica de tarifas vida deudor: "${query}"`);

    try {
        // B√∫squedas espec√≠ficas de texto para encontrar tarifas exactas
        const tariffSearches = [
            "Tarifa mes / persona",
            "Tarifa completa IVA del 19%",
            "Tarifa propuesta para productos mandatorios"
        ];

        for (const tariffText of tariffSearches) {
            console.log(`[DEBUG] Buscando texto exacto: "${tariffText}"`);
            
            const { data, error } = await supabase
                .from('asistenciavida_documents')
                .select('*')
                .ilike('content', `%${tariffText}%`);

            if (error) {
                console.error(`[DEBUG] ‚ùå Error buscando "${tariffText}":`, error);
                continue;
            }

            if (data && data.length > 0) {
                console.log(`[DEBUG] ‚úÖ Encontrado documento con "${tariffText}"`);
                
                // Extraer el precio espec√≠ficamente
                const content = data[0].content;
                const priceInfo = extractPriceFromTariffContent(content);
                
                if (priceInfo) {
                    // Crear un resultado mejorado con el precio destacado
                    const enhancedResult = {
                        ...data[0],
                        content: `PRECIOS DEL SEGURO DE VIDA DEUDOR:

${priceInfo}

INFORMACI√ìN ADICIONAL:
${content}`,
                        extracted_price: priceInfo
                    };
                    
                    console.log(`[DEBUG] üìÑ Precio extra√≠do: ${priceInfo}`);
                    return [enhancedResult];
                }
                
                console.log(`[DEBUG] üìÑ Contenido:`, content.substring(0, 800));
                return data;
            }
        }

        // Si no encontramos nada con texto exacto, usar b√∫squeda normal
        console.log('[DEBUG] ‚ö†Ô∏è No se encontraron tarifas con texto exacto, usando b√∫squeda h√≠brida');
        return await searchVidaDeudorVectors(query);

    } catch (e) {
        const errorMessage = e instanceof Error ? e.message : String(e);
        console.error(`[DEBUG] ‚ùå Error en searchVidaDeudorTariffs: ${errorMessage}`);
        return await searchVidaDeudorVectors(query);
    }
};

/**
 * Extrae el precio espec√≠fico del contenido de tarifas
 * @param content - Contenido del documento
 * @returns Informaci√≥n del precio formateada
 */
function extractPriceFromTariffContent(content: string): string | null {
    const lines = content.split('\n');
    let foundTariffSection = false;
    let priceInfo = '';
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        // Detectar si estamos en la secci√≥n de tarifas
        if (line.includes('Tarifa mes / persona') || 
            line.includes('Tarifa completa IVA') || 
            line.includes('Tarifa propuesta para productos mandatorios')) {
            foundTariffSection = true;
            priceInfo += `üìã ${line}\n`;
            continue;
        }
        
        // Si estamos en la secci√≥n de tarifas y encontramos un precio
        if (foundTariffSection && /\$\d+/.test(line)) {
            priceInfo += `üí∞ PRECIO: ${line}\n`;
            
            // Crear un resumen claro
            return `${priceInfo}
üìç RESUMEN: El seguro de vida deudor tiene un costo de ${line} seg√∫n la propuesta econ√≥mica.`;
        }
        
        // Si estamos en la secci√≥n de tarifas, agregar l√≠neas relevantes
        if (foundTariffSection && line) {
            priceInfo += `   ${line}\n`;
        }
    }
    
    return null;
}

/**
 * Busca en la base vectorial de Bienestar Plus usando embeddings de OpenAI
 * @param query - La consulta del usuario
 * @returns Array de resultados de la b√∫squeda vectorial
 */
export const searchBienestarVectors = async (query: string): Promise<any[]> => {
    const embeddings = createEmbeddings();
    const supabase = createSupabaseClient();
    console.log(`[DEBUG] Iniciando b√∫squeda en Bienestar Plus con la consulta: "${query}"`);

    try {
        // Generar embedding para la consulta
        const queryEmbedding = await embeddings.embedQuery(query);
        console.log("[DEBUG] Embedding generado para la consulta.");

        // Detectar si la consulta es sobre cobertura o precios y optimizar la b√∫squeda
        const isCoverageQuery = /cobertura|cubre|abarca|servicios|incluye|esperar|beneficios|protecci√≥n|ampara/i.test(query);
        const isPriceQuery = /precio|cuesta|vale|pagar|costo|cu√°nto|propuesta econ√≥mica|econ√≥mica|tarifa|valor|cotizaci√≥n/i.test(query);
        
        // Estrategia de b√∫squeda: empezar con la consulta original, luego simplificar
        let searchQueries = [query];
        
        // Siempre agregar versiones simplificadas como fallback
        searchQueries.push("bienestar plus");
        searchQueries.push("seguro bienestar");
        searchQueries.push("plan bienestar");
        
        if (isCoverageQuery) {
            // Agregar variaciones de b√∫squeda para consultas sobre cobertura
            searchQueries.push("cobertura");
            searchQueries.push("servicios incluidos");
            searchQueries.push("beneficios seguro");
            searchQueries.push("qu√© cubre");
        } else if (isPriceQuery) {
            // Agregar variaciones de b√∫squeda para consultas sobre precio
            searchQueries.push("propuesta econ√≥mica");
            searchQueries.push("precio del seguro");
            searchQueries.push("costo del seguro");
            searchQueries.push("valor del seguro");
            searchQueries.push("cu√°nto cuesta");
            searchQueries.push("tarifa");
        } else {
            // Para consultas generales, agregar t√©rminos relacionados
            searchQueries.push("informaci√≥n");
            searchQueries.push("seguro");
            searchQueries.push("cobertura");
            searchQueries.push("beneficios");
        }

        // Acumular todos los chunks relevantes de todas las queries
        const allChunks: any[] = [];
        const seenIds = new Set();
        for (const searchQuery of searchQueries) {
            const searchEmbedding = searchQuery === query ? queryEmbedding : await embeddings.embedQuery(searchQuery);
            const { data, error } = await supabase.rpc('search_bienestarplus_documents_hybrid', {
                query_embedding: searchEmbedding,
                query_text: searchQuery,
                match_threshold: 0.05, // M√°s bajo para asegurar chunks relevantes
                match_count: 20, // M√°s alto para asegurar chunk 8
                rrf_k: 60
            });

            if (error) {
                console.error('[DEBUG] ‚ùå Error en la llamada RPC a Supabase:', JSON.stringify(error, null, 2));
                continue;
            }

            if (data && data.length > 0) {
                console.log(`[DEBUG] ‚úÖ Llamada RPC a Supabase exitosa para query: "${searchQuery}"`);
                console.log(`[DEBUG] Se recibieron ${data.length} chunks. IDs:`, (data as any[]).map((d: any) => d.id));
                (data as any[]).forEach((chunk: any, idx: number) => {
                  console.log(`[DEBUG] Chunk #${idx + 1} (ID: ${chunk.id}):\n${chunk.content.substring(0, 200)}...`);
                  if (!seenIds.has(chunk.id)) {
                    allChunks.push(chunk);
                    seenIds.add(chunk.id);
                  }
                });
            }
        }

        // Si es consulta de precio, buscar expl√≠citamente chunks con "$"
        if (isPriceQuery) {
            const { data: priceChunks, error: priceError } = await supabase
                .from('bienestarplus_documents')
                .select('*')
                .ilike('content', '%$%');
            if (priceError) {
                console.error('[DEBUG] ‚ùå Error buscando chunks con "$":', priceError);
            } else if (priceChunks && priceChunks.length > 0) {
                priceChunks.forEach((chunk: any) => {
                    if (!seenIds.has(chunk.id)) {
                        allChunks.push(chunk);
                        seenIds.add(chunk.id);
                        console.log(`[DEBUG] Chunk de precio a√±adido por b√∫squeda directa (ID: ${chunk.id})`);
                    }
                });
            }
        }

        if (allChunks.length > 0) {
            // Si es consulta de precio, priorizar el chunk con el precio literal
            if (isPriceQuery) {
                // Busca el primer chunk que contenga un patr√≥n de precio claro
                const priceChunk = allChunks.find(chunk => /\$\s?\d+[\d\.]*\s?(MENSUAL|ANUAL|\/PERSONA|TARIFA|IVA)?/i.test(chunk.content));
                if (priceChunk) {
                    console.log(`[DEBUG] Chunk de precio detectado y priorizado (ID: ${priceChunk.id})`);
                    return [priceChunk];
                }
            }
            return allChunks;
        }

        // Si no encontramos nada con ninguna consulta
        console.log('[DEBUG] ‚ö†Ô∏è La b√∫squeda no arroj√≥ resultados desde Supabase.');
        return [];
    } catch (e) {
        const errorMessage = e instanceof Error ? e.message : String(e);
        console.error(`[DEBUG] ‚ùå Excepci√≥n capturada en searchBienestarVectors: ${errorMessage}`);
        throw e;
    }
};
